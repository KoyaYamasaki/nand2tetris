// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // instruction
    // [15] = 1 if this is A instruction otherwise it is C Instruction
    // [12] = a bit
    // [11] = c1
    // [6]  = c6
    // [5]  = d1
    // [3]  = d3
    // [2]  = j1
    // [0]  = j3

    Not(in=instruction[15], out=aInst);
    Not(in=aInst, out=cInst);

    // d bit
    And(a=cInst, b=instruction[5], out=destA);
    And(a=cInst, b=instruction[4], out=destD);
    And(a=cInst, b=instruction[12], out=destM);

    Or(a=destA, b=aInst, out=loadAreg);

    // c bit
    And(a=cInst, b=instruction[11], out=c1);
    And(a=cInst, b=instruction[10], out=c2);
    And(a=cInst, b=instruction[9], out=c3);
    And(a=cInst, b=instruction[8], out=c4);
    And(a=cInst, b=instruction[7], out=c5);
    And(a=cInst, b=instruction[6], out=c6);

    // j bit
    And(a=cInst, b=instruction[2], out=j1);
    And(a=cInst, b=instruction[1], out=j2);
    And(a=cInst, b=instruction[0], out=j3);

    // b & sel is not sure yet
    Mux16(a=instruction, b=aluOut, sel=cInst, out=instruction1);

    ARegister(in=instruction1, load=loadAreg, out=aRegOut, out[0..14]=addressM);

    // sel is not sure yet
    Mux16(a=aRegOut, b=inM, sel=destM, out=aluinput);

    DRegister(in=aluOut, load=destD, out=dRegOut);

    ALU(x=dRegOut, y=aluinput, zx=c1, nx=c2, zy=c3, ny=c4, f=c5, no=c6, out=aluOut, out=outM, zr=zr, ng=ng);

    // WriteM?
    And(a=instruction[15], b=instruction[3], out=writeM);

    // PC setups
    DMux8Way(in=true, sel[0]=j3, sel[1]=j2, sel[2]=j1, a=dMuxA, b=dMuxB, c=dMuxC, d=dMuxD, e=dMuxE, f=dMuxF, g=dMuxG, h=jmp);

    Not(in=zr, out=nzr);
    Not(in=ng, out=nng);
    And(a=nzr, b=nng, out=nzrng);

    Or(a=zr, b=ng, out=orzrng);

    // JEQ
    And(a=dMuxC, b=zr, out=jeq);

    // JLT
    And(a=dMuxE, b=ng, out=jlt);

    // JGT
    And(a=dMuxB, b=nzrng, out=jgt);

    // JGE
    And(a=dMuxD, b=nng, out=jge);

    // JNE
    And(a=dMuxF, b=nzr, out=jne);

    // JLE
    And(a=dMuxG, b=orzrng, out=jle);

    Or8Way(in[0]=jeq, in[1]=jlt, in[2]=jgt, in[3]=jge, in[4]=jne, in[5]=jle, in[6]=jmp, in[7]=false, out=pcLoad);
    Not(in=pcLoad, out=nPcLoad);
    Or(a=nPcLoad, b=dMuxA, out=pcInc);

    // load & inc is empty
    PC(in=aRegOut, load=pcLoad, inc=pcInc, reset=reset, out[0..14]=pc);
}